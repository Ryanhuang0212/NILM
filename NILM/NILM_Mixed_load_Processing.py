from __future__ import print_function
import numpy as np
import pandas as pd
import os
import time
import json
import shutil
from scipy.fft import fft, fftfreq
# ÈñãÂßãË®àÊôÇ
start_time = time.time()
print('ÂâçËôïÁêÜÁ®ãÂºèÈñãÂßãÂü∑Ë°å=============================================')

# Ë≥áÊñôÈõÜ
csv_folder_path = r"D:\graduate_info\Research\code\lab load\2025 lab mix"
meta_json_path = r"D:\graduate_info\Research\code\lab load\2025 lab mix\2025_lab_15s_aggregated_Steam_juice.json"

# =======================================================================

threshold = 0.3
window_size = 2000  
step_size = 2000   
sampling_rate = 2000 
base_freq = 60  
harmonics = list(range(1, 8)) 

max_length = 90000
# =======================================================================
# ÂÆöÁæ©ÁâπÂæµÂêçÁ®±
feature_names = ['RMS', 'Peak', 'Peak-to-Peak', 'Waveform Factor', 'Crest Factor', 
                 'Power', 'Power Std', 'vi area', 'Current Range', 'ZCR', 
                'Skewness' , 'Kurtosis','Delta Current Mean','Delta Current Std'
                ,"WindowIndex"]
# =======================================================================

# ÂÆöÁæ©Ê∏ÖÁ©∫Ë≥áÊñôÂ§æÁöÑÂáΩÊï∏
def clear_folder(folder_path):
    if os.path.exists(folder_path):
        for file in os.listdir(folder_path):
            file_path = os.path.join(folder_path, file)
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)  # Âà™Èô§Êñá‰ª∂ÊàñÁ¨¶ËôüÈÄ£Áµê
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)  # ÈÅûÊ≠∏Âà™Èô§Ë≥áÊñôÂ§æ
        print(f"Ë≥áÊñôÂ§æ {folder_path} Â∑≤Ê∏ÖÁ©∫")
    else:
        os.makedirs(folder_path)  # Â¶ÇÊûúË≥áÊñôÂ§æ‰∏çÂ≠òÂú®ÔºåÂâµÂª∫ÂÆÉ
        print(f"Ë≥áÊñôÂ§æ {folder_path} Â∑≤ÂâµÂª∫")

# ÂàùÂßãÂåñÂ≠óÂÖ∏Â≠òÂÑ≤ÊØèÁ®ÆÈõªÂô®È°ûÂûãÁöÑÊï∏Êìö
appliance_data = {}

# Âä†Ëºâ JSON Êñá‰ª∂
with open(meta_json_path, "r") as file:
    json_data = json.load(file)

# ÂàùÂßãÂåñÁ©∫ÁöÑ DataFrame Â≠òÊîæÊ∑∑ÂêàË≤†ËºâÊï∏Êìö
mixed_load_data = pd.DataFrame()

# ÈÅçÊ≠∑ JSON Êñá‰ª∂ÁöÑÊØèÂÄãÊ¢ùÁõÆ
for key, entry in json_data.items():
    if "appliances" not in entry:
        continue  # Â¶ÇÊûúÊ≤íÊúâ "appliances" ÈçµÔºåË∑≥ÈÅé

    appliances = entry["appliances"]

    # ÁîüÊàêË®≠ÂÇôÁµÑÂêàÁöÑÊèèËø∞
    appliance_types = [appliance["type"] for appliance in entry["appliances"]]
    combination_label = "_".join(appliance_types)  # Áî® "_" ÊãºÊé•Ë®≠ÂÇôÈ°ûÂûã‰ΩúÁÇ∫ÁµÑÂêàÊ®ôÁ±§

    # ÊâæÂà∞Â∞çÊáâÁöÑ CSV Êñá‰ª∂
    csv_file_path = os.path.join(csv_folder_path, f"2025_steam_juice.csv")
    if not os.path.exists(csv_file_path):
        print(f"Êâæ‰∏çÂà∞Â∞çÊáâÁöÑ CSV Êñá‰ª∂: {csv_file_path}")
        continue

    # ËÆÄÂèñ CSV Êñá‰ª∂
    df = pd.read_csv(csv_file_path, header=None, names=["voltage","current"])
    df["combination"] = combination_label  # Ê∑ªÂä†ÁµÑÂêàÊ®ôÁ±§Âàó
    df["csv_id"] = key  # Ê∑ªÂä†Êñá‰ª∂ ID Âàó

     # üõ†Ô∏è ÂàùÂßãÂåñÈõªÂô®ÁãÄÊÖã
    event_status_list = []
    current_status = set()

    # ÈÅçÊ≠∑ CSV ÂÖßÁöÑÊØèÂÄãÂèñÊ®£Èªû
    for row_idx in range(len(df)):
        for ap in appliances:
            dev_type = ap.get("type", "Unknown")

            on_list = [int(int(x))for x in ap["on"].strip("[]").split()]
            off_list = [int(int(x)) for x in ap["off"].strip("[]").split()]

            # Ëã• row_idx Âà∞ÈÅîÈñãÂïüÈªûÔºåÂâáÂä†ÂÖ•Ë®≠ÂÇô
            if row_idx in on_list:
                current_status.add(dev_type)  # **ÈñãÂïüË®≠ÂÇô**
            if row_idx in off_list:
                current_status.discard(dev_type)  # **ÈóúÈñâË®≠ÂÇô**

        # Ë®òÈåÑÁï∂ÂâçÁãÄÊÖã
        if current_status:
            event_status_list.append("_".join(sorted(current_status)))
        else:
            event_status_list.append("None")

    # print(f"{dev_type}: on={on_list}, off={off_list}")
    # üõ†Ô∏è Â∞á‰∫ã‰ª∂Ë≥áË®äÂä†ÂÖ• DataFrame

    df["event_status"] = event_status_list

    # üõ†Ô∏è Â∞áÊï∏ÊìöÂêà‰ΩµÂà∞Á∏ΩË°®
    mixed_load_data = pd.concat([mixed_load_data, df], ignore_index=True)

# üîπ Ëº∏Âá∫Ê™¢Êü•
print("‚úÖ Âêà‰ΩµÂæåÁöÑ mixed_load_data:")
print(mixed_load_data.head(30))  # Êü•ÁúãÂâç 30 Á≠Ü
print(f"‚úÖ Á∏ΩË≥áÊñôÁ≠ÜÊï∏: {len(mixed_load_data)}")

# ÂàÜÁµÑ‰∏¶Âêà‰ΩµÊØèÁ®ÆË®≠ÂÇôÈ°ûÂûãÁöÑÊï∏Êìö
for appliance_type, group in mixed_load_data.groupby("combination"):
    # ÊØèÁµÑÊòØ‰∏ÄÂÄã DataFrame
    combined_data = group.reset_index(drop=True)
    print(f"Â∑≤Âêà‰Ωµ {appliance_type} ÁöÑÊï∏ÊìöÔºåÂÖ± {len(combined_data)} Ë°å")

original_appliance_output_folder = r"D:\graduate_info\Research\code\lab load\original_appliance_output_folder_combine"
# Áõ¥Êé•Áî® mixed_load_data ‰æù combination ÂàÜÁµÑËº∏Âá∫
current_data = {}
voltage_data = {}
event_data = {}
appliance_names = list(current_data.keys()) 
original_appliance_data = {}
#  Êåâ "combination" ÂàÜÁµÑ
for appliance_name, group in mixed_load_data.groupby("combination"):
    # ÊèêÂèñÊØèÁ®ÆË®≠ÂÇôÁöÑ current Âíå voltage Êï∏Êìö
    current_data[appliance_name] = group["current"].values
    voltage_data[appliance_name] = group["voltage"].values
    event_data[appliance_name] = group["event_status"].values
    appliance_names.append(appliance_name) 

    # ÈÅçÊ≠∑ appliance_namesÔºåËôïÁêÜÊØèÂÄãÈõªÂô®ÁöÑÊï∏Êìö
for appliance_name in appliance_names:
    # ÊèêÂèñ current Âíå voltage
    appliance_current = current_data[appliance_name]
    appliance_voltage = voltage_data[appliance_name]
    appliance_event = event_data[appliance_name]
    
    # Âª∫Á´ã DataFrame ‰∏¶‰øùÂ≠òÂà∞ new_appliance_data
    original_appliance_data[appliance_name] = pd.DataFrame({
        "current": appliance_current,
        "voltage": appliance_voltage,
        "event_status": appliance_event,
        "load": appliance_name
    })

if not os.path.exists(original_appliance_output_folder):
    os.makedirs(original_appliance_output_folder)

clear_folder(original_appliance_output_folder)

for appliance_name, df in original_appliance_data.items():
        csv_filename = f"{appliance_name}.csv"
        csv_path = os.path.join(original_appliance_output_folder, csv_filename)
        df.to_csv(csv_path, index=False)
        print(f"{csv_filename} Â∑≤Â≠òËá≥ {csv_path}")

# ÂÆöÁæ©‰∏ÄÂÄãÂáΩÊï∏ÔºåÁî®ÊñºÈÅéÊé°Ê®£ÈáçË§áÊï∏Êìö
def oversample_data(data, target_length):
    if len(data) == 0:
        return np.zeros(target_length)  # ÈÅøÂÖçÁ©∫Êï∏Êìö
    repeats = target_length // len(data)  # Ë®àÁÆóÂÆåÊï¥ÈáçË§áÁöÑÊ¨°Êï∏
    remainder = target_length % len(data)  # Ë®àÁÆó‰∏çË∂≥ÁöÑÈÉ®ÂàÜ
    return np.concatenate([data] * repeats + [data[:remainder]])

new_appliance_output_folder = r"D:\graduate_info\Research\code\lab load\new_appliance_output_folder_combine"
new_appliance_data = {}

# ÈÅçÊ≠∑ appliance_namesÔºåËôïÁêÜÊØèÂÄãÈõªÂô®ÁöÑÊï∏Êìö
for appliance_name in appliance_names:
    # ÊèêÂèñ current Âíå voltage
    appliance_current = current_data[appliance_name]
    appliance_voltage = voltage_data[appliance_name]
    appliance_event = event_data[appliance_name]
    
    # ÈÅéÊé°Ê®£
    oversampled_current = oversample_data(appliance_current, max_length)
    oversampled_voltage = oversample_data(appliance_voltage, max_length)
    oversampled_event = oversample_data(appliance_event, max_length)
    
    # Âª∫Á´ã DataFrame ‰∏¶‰øùÂ≠òÂà∞ new_appliance_data
    new_appliance_data[appliance_name] = pd.DataFrame({
        "current": oversampled_current,
        "voltage": oversampled_voltage,
        "event_status": oversampled_event,
        "load": appliance_name
    })

if not os.path.exists(new_appliance_output_folder):
    os.makedirs(new_appliance_output_folder)

clear_folder(new_appliance_output_folder)

for appliance_name, df in new_appliance_data.items():
    # print('appliance_name: ', appliance_name)
    # if appliance_name.startswith("Air Conditioner"):
        csv_filename = f"{appliance_name}.csv"
        csv_path = os.path.join(new_appliance_output_folder, csv_filename)
        df.to_csv(csv_path, index=False)
        print(f"{csv_filename} Â∑≤Â≠òËá≥ {csv_path}")

# È©óË≠âÁµêÊßã
for name, df in new_appliance_data.items():
    print(f"{name}: {df.shape}")
    print(df.head())

print("=======================================================================")

current_data_dict = {}
voltage_data_dict = {}

# ÈÅçÊ≠∑ appliance_namesÔºåËôïÁêÜÊØèÂÄãÈõªÂô®ÁöÑÊï∏Êìö
for appliance_name, df in new_appliance_data.items():
    current_data_dict[appliance_name] = df["current"].values
    voltage_data_dict[appliance_name] = df["voltage"].values

# Â∞áÊâÄÊúâË®≠ÂÇôÁöÑ current_data Êï¥ÂêàÂà∞ÂàóË°®‰∏≠
current_data_list = list(current_data_dict.values())
voltage_data_list = list(voltage_data_dict.values())

# ÁßªÂãïË¶ñÁ™óÂèñÁâπÂæµ
# Ë®àÁÆó RMS, Peak Âíå Peak-to-Peak ÁöÑÂáΩÊï∏
def calculate_metrics(window):
    window = np.array(window)
    window -= np.mean(window)  # ÂéªÈô§ DC ÂàÜÈáè
    rms = np.sqrt(np.mean(window**2))
    peak = np.max(window)
    peak_to_peak = np.ptp(window)

    if np.mean(np.abs(window)) == 0:  
        waveform_factor = 0
    else:
        waveform_factor = rms / np.mean(np.abs(window))

    if rms == 0:
        crest_factor = 0
    else:
        crest_factor = peak / rms

    current_range = np.max(window) - np.min(window)

    zero_crossings = np.where(np.diff(np.sign(window)))[0].size
    zero_crossing_rate = zero_crossings / (len(window) - 1) if len(window) > 1 else 0

    X_min, X_max = np.min(window), np.max(window)
    if X_max != X_min:
        X_normalized = 2 * (window - X_min) / (X_max - X_min) - 1
    else:
        X_normalized = np.zeros_like(window)  # ÈÅøÂÖç NaN
    
    angles = np.arccos(np.clip(X_normalized, -1, 1))
    GAF = np.cos(angles[:, None] + angles[None, :])
    diag_GAF = np.diag(GAF)

    # ‚úÖ **Èò≤Ê≠¢ NaN**
    if np.isnan([rms, peak, peak_to_peak, waveform_factor, crest_factor, current_range, zero_crossing_rate]).any():
        print(f"‚ö†Ô∏è calculate_metrics() ÂÖßÈÉ®ÁôºÁèæ NaNÔºåÊ™¢Êü•Êï∏Êìö window: {window}")

    return rms, peak, peak_to_peak, waveform_factor, crest_factor, GAF, current_range, zero_crossing_rate

# Ë®àÁÆóÈõªÊµÅËÆäÂåñÁéá (ŒîCurrent)
def compute_delta_current(window):
    window_shifted = window[:-1].copy()
    window_shifted[window_shifted == 0] = 1e-6  # ÈÅøÂÖçÈô§‰ª• 0

    delta_current = np.diff(window) / window_shifted  # Ë®àÁÆóËÆäÂåñÁéá
    if delta_current.size > 0:
        delta_current = np.append(delta_current, delta_current[-1])  # Á¢∫‰øùÁ∂≠Â∫¶‰∏ÄËá¥
    else:
        delta_current = np.zeros(1)  # ÈÅøÂÖçÁ¥¢ÂºïÈåØË™§

    # ÁßªÈô§ NaN Êàñ Inf
    delta_current = np.nan_to_num(delta_current, nan=0.0, posinf=0.0, neginf=0.0)

    return np.mean(delta_current), np.std(delta_current)  # ËøîÂõûÂπ≥ÂùáËÆäÂåñÁéá & Ê®ôÊ∫ñÂ∑Æ

def process_windowed_data(current_data, voltage_data, threshold, window_size, step_size):
    feature_list = []
    delta_feature_list = []
    prev_features = None
    window_indices = []
    window_index = 0  # Ë®òÈåÑË¶ñÁ™óÁ∑®Ëôü

    for i in range(0, len(current_data) - window_size + 1, step_size):
        current_window = current_data[i:i + window_size]
        voltage_window = voltage_data[i:i + window_size]

        if np.isnan(current_window).any() or np.isnan(voltage_window).any():
            print(f"‚ö†Ô∏è Á™óÂè£ {window_index} ÂåÖÂê´ NaNÔºåË∑≥ÈÅéÔºÅ")
            continue  # **Áõ¥Êé•Ë∑≥ÈÅé NaN Á™óÂè£**
        
        if len(current_window) < window_size:
            pad_length = window_size - len(current_window)
            current_window = np.pad(current_window, (0, pad_length), mode='constant', constant_values=0)
            voltage_window = np.pad(voltage_window, (0, pad_length), mode='constant', constant_values=0)
            print(f"‚ö†Ô∏è Á™óÂè£ {window_index} ÈªûÊï∏‰∏çË∂≥ÔºåÂ∑≤Ë£ú 0")


        if np.max(current_window) < threshold:
            window_index += 1  # Âç≥‰ΩøË∑≥ÈÅé‰πüË¶ÅÈÅûÂ¢ûÁ¥¢Âºï
            continue  # ‰∏çÂÑ≤Â≠òË©≤Ë¶ñÁ™óÁöÑÁâπÂæµ
        try:
            rms, peak, peak_to_peak, waveform_factor, crest_factor, GAF, current_range, zcr = calculate_metrics(current_window)
            power = np.mean(current_window * voltage_window)
            power_std = np.std(current_window * voltage_window)
            vi_area = np.trapz(y=current_window, x=voltage_window)
            skewness = pd.Series(current_window).skew()
            kurtosis = pd.Series(current_window).kurt()
            delta_current_mean_val, delta_current_std_val = compute_delta_current(current_window)
            power = np.mean(current_window * voltage_window)

            # ‚úÖ **Èò≤Ê≠¢ NaN ÊàñÊ•µÁ´ØÊï∏ÂÄº**
            if np.isnan([power, power_std]).any():
                print(f"‚ö†Ô∏è Á™óÂè£ {window_index} ÁöÑ power Ë®àÁÆóÂá∫Áèæ NaNÔºåcurrent_window: {current_window}, voltage_window: {voltage_window}")

            if abs(power) > 1e10 or abs(power_std) > 1e10:
                print(f"‚ö†Ô∏è Á™óÂè£ {window_index} ÁöÑ power Âá∫ÁèæÁï∞Â∏∏Êï∏ÂÄºÔºåpower: {power}, power_std: {power_std}")

            # Áï∂ÂâçÁ™óÂè£ÁâπÂæµ
            feature_vector = np.array([rms, peak, peak_to_peak, waveform_factor, crest_factor,
                                        power, power_std, vi_area, current_range, zcr, 
                                        skewness, kurtosis, delta_current_mean_val, delta_current_std_val])
            
            feature_vector = np.append(feature_vector, window_index)

            # **Ê™¢Êü• NaN**
            if np.isnan(feature_vector).any():
                print(f"‚ö†Ô∏è Ë≠¶Âëä: Âú®Á™óÂè£ {window_index} ÁôºÁèæ NaN ÂÄºÔºåÂèØËÉΩ‰æÜËá™Ë®àÁÆóÈåØË™§")
                print(feature_vector)  # ÂàóÂç∞ÂïèÈ°åË¶ñÁ™óÁöÑÁâπÂæµ

            # **ÊéíÈô§‰∏çË©≤Ë®àÁÆóËÆäÂåñÈáèÁöÑÁâπÂæµ**
            exclude_features = ["Delta Current Mean", "Delta Current Std", "WindowIndex"]
            exclude_indices = [feature_names.index(feat) for feat in exclude_features]

            if prev_features is not None:
                delta_vector = np.array([
                    feature_vector[i] - prev_features[i] if i not in exclude_indices else 0
                    for i in range(len(feature_vector))
                ])
            else:
                delta_vector = np.zeros_like(feature_vector)  # Á¨¨‰∏ÄÂÄãÁ™óÂè£Ê≤íÊúâËÆäÂåñÈáèÔºåË®≠ÁÇ∫ 0

            prev_features = feature_vector


            # Â≠òÂÑ≤ÂéüÂßãÁâπÂæµ & ËÆäÂåñÈáèÁâπÂæµ
            feature_list.append(feature_vector)
            delta_feature_list.append(delta_vector)
            window_indices.append(window_index)
            window_index += 1  # ÊØèÊ¨°Ëø¥ÂúàÈÉΩÈÅûÂ¢ûË¶ñÁ™óÁ¥¢Âºï

        except Exception as e:
            print(f"‚ùå ÈåØË™§: Á™óÂè£ {window_index} ÁÑ°Ê≥ïË®àÁÆóÁâπÂæµÔºåÈåØË™§Ë®äÊÅØ: {e}")


    return np.array(feature_list), np.array(delta_feature_list), np.array(window_indices)

# ÂàùÂßãÂåñÁµêÊûúÂ≠òÂÑ≤ÁµêÊßã
all_features_results = []
all_delta_features_results = []
all_window_indices = []
# ÈÅçÊ≠∑ÊâÄÊúâÊï∏ÊìöÈõÜÈÄ≤Ë°åÁßªÂãïË¶ñÁ™óËôïÁêÜ
for idx, (current_data, voltage_data) in enumerate(zip(current_data_list, voltage_data_list)):
    print(f"Ê≠£Âú®ËôïÁêÜ current_data{idx + 1}...")

    # ÂèñÂæóÂéüÂßãÁâπÂæµ & ËÆäÂåñÈáèÁâπÂæµ
    features, delta_features, window_box = process_windowed_data(
        current_data, voltage_data, threshold, window_size, step_size
    )

    # ËΩâÁÇ∫ DataFrame Â≠òÂÑ≤
    all_features_results.append(pd.DataFrame(features))
    all_delta_features_results.append(pd.DataFrame(delta_features))
    all_window_indices.append(pd.DataFrame(window_box))

print("ÊâÄÊúâÊï∏ÊìöÈõÜÁöÑÁßªÂãïË¶ñÁ™óËôïÁêÜÂÆåÊàê„ÄÇ")

# ÊèêÂèñÁâπÂÆöÁ™óÂè£ÂÖßÁöÑË´ßÊ≥¢ÁâπÂæµ
def extract_harmonics(fft_vals, freqs, base_freq, harmonics):
    harmonic_amplitudes = []    
    harmonic_phases = []
    for h in harmonics:
        # ÊâæÂà∞ÊúÄÊé•Ëøë h ÂÄçÂü∫Ê≥¢È†ªÁéáÁöÑÈ†ªÁéáÂàÜÈáè
        idx = np.argmin(np.abs(freqs - h * base_freq))
        harmonic_amplitudes.append(np.abs(fft_vals[idx]))
        harmonic_phases.append(np.angle(fft_vals[idx]))  # ÊèêÂèñÁõ∏‰ΩçËßí
    return harmonic_amplitudes, harmonic_phases

# Ë®àÁÆóÊØèÂÄãÁ™óÂè£ÁöÑFFT‰∏¶ÊèêÂèñË´ßÊ≥¢ÁâπÂæµ
def get_harmonics_windowed(current_data, voltage_data, window_size, step_size, sampling_rate, base_freq, harmonics, threshold):
    harmonic_results = []
    thd_results = [] 
    phase_results = []
    pq_results = []
    window_indices = []

    window_index = 0

    for start in range(0, len(current_data) - window_size + 1, step_size):
        current_window  = current_data[start:start + window_size]
        voltage_window = voltage_data[start:start + window_size]
        if len(current_window) < window_size:
            current_window = np.pad(current_window, (0, window_size - len(current_window)), 'constant')
            voltage_window = np.pad(voltage_window, (0, window_size - len(voltage_window)), 'constant')

        if np.max(current_window) < threshold:
            window_index += 1  # Âç≥‰ΩøË∑≥ÈÅé‰πüË¶ÅÈÅûÂ¢ûÁ¥¢Âºï
            continue  

        # ËÆ°ÁÆó FFT
        fft_vals_current = fft(current_window)
        fft_vals_voltage = fft(voltage_window)

        fft_vals_current = fft_vals_current[:len(fft_vals_current) // 2]  # ÂèñÂâçÂçäÈÉ®ÂàÜÁöÑ FFT ÁªìÊûú
        fft_vals_voltage = fft_vals_voltage[:len(fft_vals_voltage) // 2]
        # ÊèêÂèñÈ†ªÁéá
        freqs = fftfreq(window_size, d=1.0 / sampling_rate)[:len(fft_vals_current)]

        # ÊèêÂèñË∞êÊ≥¢ÁâπÂæÅÔºàÂπÖÂÄºÂíåÁõ∏‰ΩçËßíÔºâ
        harmonic_amplitudes_current, harmonic_phases_current = extract_harmonics(fft_vals_current, freqs, base_freq, harmonics)
        harmonic_amplitudes_voltage, harmonic_phases_voltage = extract_harmonics(fft_vals_voltage, freqs, base_freq, harmonics)

        harmonic_results.append(harmonic_amplitudes_current)
        phase_results.append(harmonic_phases_current)

        # ËÆ°ÁÆó PQÔºàÊúâÂäüÂíåÊó†ÂäüÂäüÁéáÔºâ
        P = 0
        Q = 0

        for v_amp, i_amp, v_phase, i_phase in zip(harmonic_amplitudes_voltage, harmonic_amplitudes_current, harmonic_phases_voltage, harmonic_phases_current):
            angle_diff = v_phase - i_phase
            P += v_amp * i_amp * np.cos(angle_diff)
            Q += v_amp * i_amp * np.sin(angle_diff)
        
        pq_results.append((P, Q))

        # ËÆ°ÁÆó THD
        V1 = harmonic_amplitudes_current[0]  # Âü∫Ê≥¢
        if V1 != 0:  # ÈÅøÂÖçÈô§‰ª• 0
            thd = np.sqrt(np.sum(np.array(harmonic_amplitudes_current[1:])**2)) / V1 * 100  # ËÆ°ÁÆó THD
        else:
            thd = 0  # Â¶ÇÊûúÂü∫Ê≥¢‰∏∫ 0ÔºåÂàô THD ‰∏∫ 0
        thd_results.append(thd)
        
        window_indices.append(window_index)  # Ë®òÈåÑË¶ñÁ™óÁ¥¢Âºï
        window_index += 1  # ÊØèÊ¨°Ëø¥ÂúàÈÉΩÈÅûÂ¢ûË¶ñÁ™óÁ¥¢Âºï


    return np.array(harmonic_results), np.array(phase_results), np.array(thd_results), np.array(pq_results), np.array(window_indices)

# ÂÆöÁæ©Ë®≠ÂÇôÂàóË°®
harmonics_results = []
phase_results = []
thd_results_all_devices = []
pq_results_all_devices = []
window_index = []

# Â∞çÊØèÂÄãË®≠ÂÇôÁöÑÈõªÊµÅÊï∏ÊìöÈÄ≤Ë°åÁßªÂãïÁ™óÂè£ FFT ‰∏¶ÊèêÂèñË´ßÊ≥¢ÁâπÂæµ

for current_data, voltage_data in zip(current_data_list, voltage_data_list):
    harmonics_current_data, phases_current_data, thd_current_data, pq_current_data, window_box = get_harmonics_windowed(
        current_data, voltage_data, window_size, step_size, sampling_rate, base_freq, harmonics, threshold
    )
    harmonics_results.append(pd.DataFrame(harmonics_current_data))
    phase_results.append(pd.DataFrame(phases_current_data))
    thd_results_all_devices.append(pd.DataFrame(thd_current_data))
    pq_results_all_devices.append(pd.DataFrame(pq_current_data, columns=["P", "Q"]))
    window_index.append(pd.DataFrame(window_box))




# ÂÆöÁæ©ËÆäÂåñÈáèÁâπÂæµÂêçÁ®± (Âä†‰∏ä Delta_ ÂâçÁ∂¥)
delta_feature_names = [f"Delta_{name}" for name in feature_names]

for i, appliance_name in enumerate(appliance_names):
    print(f"üîç Ê™¢Êü• {appliance_name}:")
    
    # Ê™¢Êü• features ÁµêÊßã
    if i >= len(all_features_results) or all_features_results[i].empty:
        print(f"‚ö†Ô∏è {appliance_name} ÁöÑ all_features_results[{i}] ÁÇ∫Á©∫ÊàñË∂ÖÂá∫ÁØÑÂúç")
        continue

    if i >= len(all_delta_features_results) or all_delta_features_results[i].empty:
        print(f"‚ö†Ô∏è {appliance_name} ÁöÑ all_delta_features_results[{i}] ÁÇ∫Á©∫ÊàñË∂ÖÂá∫ÁØÑÂúç")
        continue

    if all_features_results[i].shape[1] != len(feature_names):
        print(f"‚ö†Ô∏è {appliance_name} ÁöÑ feature Êï∏Èáè ({all_features_results[i].shape[1]}) ËàáÂÆöÁæ©ÁöÑÁâπÂæµÊï∏ ({len(feature_names)}) ‰∏çÂåπÈÖç")
    
    if all_delta_features_results[i].shape[1] != len(delta_feature_names):
        print(f"‚ö†Ô∏è {appliance_name} ÁöÑ delta feature Êï∏Èáè ({all_delta_features_results[i].shape[1]}) ËàáÂÆöÁæ©ÁöÑÁâπÂæµÊï∏ ({len(delta_feature_names)}) ‰∏çÂåπÈÖç")

# ËôïÁêÜÊØèÂÄãË®≠ÂÇô
devices = {}
for appliance_name, i in zip(appliance_names, range(len(all_features_results))):  
    if all_features_results[i].empty or all_delta_features_results[i].empty:
        print(f"‚ö†Ô∏è Ë≠¶Âëä: {appliance_name} Ê≤íÊúâÊúâÊïàÁâπÂæµÔºåË∑≥ÈÅé")
        continue

    # Âª∫Á´ã DataFrame
    device_data = {}

    for j, feature_name in enumerate(feature_names):
        if j >= all_features_results[i].shape[1]:  # Á¢∫‰øù j Âú®ÁØÑÂúçÂÖß
            print(f"‚ö†Ô∏è ÈåØË™§: {appliance_name} ÁöÑ features Ê≤íÊúâÁ¨¨ {j} Âàó")
            continue
        device_data[feature_name] = all_features_results[i].iloc[:, j]

    for j, delta_feature_name in enumerate(delta_feature_names):
        if j >= all_delta_features_results[i].shape[1]:  # Á¢∫‰øù j Âú®ÁØÑÂúçÂÖß
            print(f"‚ö†Ô∏è ÈåØË™§: {appliance_name} ÁöÑ delta_features Ê≤íÊúâÁ¨¨ {j} Âàó")
            continue 
        device_data[delta_feature_name] = all_delta_features_results[i].iloc[:, j]

    # Ê∑ªÂä† Harmonics Âíå Phase ÁâπÂæµ
    harmonics_data = harmonics_results[i]
    phase_data = phase_results[i]

    for j in range(7):  # 7 ÂÄãË´ßÊ≥¢
        device_data[f'Harmonics{j + 1}'] = harmonics_data.iloc[:, j].values
        device_data[f'phase{j + 1}'] = phase_data.iloc[:, j].values

    # P, Q, THD
    device_data['P'] = pq_results_all_devices[i]['P'].values
    device_data['Q'] = pq_results_all_devices[i]['Q'].values    
    device_data['THD'] = thd_results_all_devices[i].iloc[:, 0]

    # Â≠òÂÖ•Ë®≠ÂÇôÂ≠óÂÖ∏
    devices[f'{appliance_name}'] = pd.DataFrame(device_data)

# È©óË≠âÁµêÊßã
for device_name, df in devices.items():
    print(f"{device_name}: {df.shape}")
    print(df.head())

# Á¢∫Ë™ç devices ÁµêÊßã
print(type(devices))
print(devices)
# Á¢∫Ë™ç devices ÁµêÊßã
print(type(devices))
print(devices)

# ÂàùÂßãÂåñÂ≠òÂÑ≤ÁâπÂÆöË≤†ËºâÁöÑÂ≠óÂÖ∏
filtered_devices = {}

# ÈÅçÊ≠∑ÊâÄÊúâË®≠ÂÇô
for appliance_name, df in devices.items(): # Âà§Êñ∑Ë®≠ÂÇôÂêçÁ®±ÊòØÂê¶‰ª•ÁõÆÊ®ôÂâçÁ∂¥ÈñãÈ†≠
    filtered_devices[appliance_name] = df
    print(f"ÊèêÂèñÁöÑË≤†Ëºâ: {appliance_name}, Êï∏ÊìöÈáè: {df.shape[0]} Ë°å")

# Á¢∫Ë™çÁØ©ÈÅ∏ÁµêÊûú
print(f"ÂÖ±ÁØ©ÈÅ∏Âá∫ {len(filtered_devices)} Á®ÆË≤†Ëºâ")

# ÂÆöÁæ©Â≠òÊ™îË∑ØÂæë
filtered_output_folder = r"D:\graduate_info\Research\code\lab load\Devices_Mixed_load_Feature"
os.makedirs(filtered_output_folder, exist_ok=True)
clear_folder(filtered_output_folder)

# ‰øùÂ≠òÁØ©ÈÅ∏ÂæåÁöÑÊï∏Êìö
for device_name, device_df in filtered_devices.items():
    df.fillna(0, inplace=True)
    file_name = f"{device_name}.csv"
    file_path = os.path.join(filtered_output_folder, file_name)
    device_df.to_csv(file_path, index=False)
    print(f"{device_name} ÁöÑÊï∏ÊìöÂ∑≤‰øùÂ≠òËá≥: {file_path}")

# ÁµêÊùüË®àÊôÇ
end_time = time.time()

# Ë®àÁÆóÁ∏ΩÂü∑Ë°åÊôÇÈñì                
execution_time = end_time - start_time
print(f"Á®ãÂºèÂü∑Ë°åÊôÇÈñì: {execution_time} Áßí")

